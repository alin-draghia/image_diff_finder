//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class ImgCmpPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="SWIGRegisterExceptionCallbacks_ImgCmp")]
    public static extern void SWIGRegisterExceptionCallbacks_ImgCmp(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_ImgCmp")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_ImgCmp(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_ImgCmp(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_ImgCmp(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(ImgCmpPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(ImgCmpPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="SWIGRegisterStringCallback_ImgCmp")]
    public static extern void SWIGRegisterStringCallback_ImgCmp(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_ImgCmp(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static ImgCmpPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_Clear")]
  public static extern void vector_ImgDiff_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_Add")]
  public static extern void vector_ImgDiff_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_size")]
  public static extern uint vector_ImgDiff_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_capacity")]
  public static extern uint vector_ImgDiff_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_reserve")]
  public static extern void vector_ImgDiff_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_new_vector_ImgDiff__SWIG_0")]
  public static extern global::System.IntPtr new_vector_ImgDiff__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_new_vector_ImgDiff__SWIG_1")]
  public static extern global::System.IntPtr new_vector_ImgDiff__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_new_vector_ImgDiff__SWIG_2")]
  public static extern global::System.IntPtr new_vector_ImgDiff__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_getitemcopy")]
  public static extern global::System.IntPtr vector_ImgDiff_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_getitem")]
  public static extern global::System.IntPtr vector_ImgDiff_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_setitem")]
  public static extern void vector_ImgDiff_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_AddRange")]
  public static extern void vector_ImgDiff_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_GetRange")]
  public static extern global::System.IntPtr vector_ImgDiff_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_Insert")]
  public static extern void vector_ImgDiff_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_InsertRange")]
  public static extern void vector_ImgDiff_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_RemoveAt")]
  public static extern void vector_ImgDiff_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_RemoveRange")]
  public static extern void vector_ImgDiff_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_Repeat")]
  public static extern global::System.IntPtr vector_ImgDiff_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_Reverse__SWIG_0")]
  public static extern void vector_ImgDiff_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_Reverse__SWIG_1")]
  public static extern void vector_ImgDiff_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_vector_ImgDiff_SetRange")]
  public static extern void vector_ImgDiff_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_delete_vector_ImgDiff")]
  public static extern void delete_vector_ImgDiff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_left_set")]
  public static extern void ImgDiff_left_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_left_get")]
  public static extern int ImgDiff_left_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_top_set")]
  public static extern void ImgDiff_top_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_top_get")]
  public static extern int ImgDiff_top_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_width_set")]
  public static extern void ImgDiff_width_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_width_get")]
  public static extern int ImgDiff_width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_height_set")]
  public static extern void ImgDiff_height_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_height_get")]
  public static extern int ImgDiff_height_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_sad_set")]
  public static extern void ImgDiff_sad_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_ImgDiff_sad_get")]
  public static extern float ImgDiff_sad_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_new_ImgDiff__SWIG_0")]
  public static extern global::System.IntPtr new_ImgDiff__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_new_ImgDiff__SWIG_1")]
  public static extern global::System.IntPtr new_ImgDiff__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("ImgCmp", EntryPoint="CSharp_delete_ImgDiff")]
  public static extern void delete_ImgDiff(global::System.Runtime.InteropServices.HandleRef jarg1);
}
